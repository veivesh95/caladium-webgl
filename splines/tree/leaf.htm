<html>

<head>
    <TITLE>Procedural leaves</TITLE>
    <script src="../CanvasMatrix.js" type="text/javascript"></script>
    <script src="../Controls.js" type="text/javascript"></script>

    <script id="shader-vs-show" type="x-shader/x-vertex">
      attribute vec3 aPos;
      attribute vec3 aCol;
      attribute vec2 aTC;
      uniform mat4 mvMatrix;
      varying vec3 color;
      varying vec2 vTC;
    void main(void) {
       vTC = aTC;
       gl_Position = mvMatrix * vec4(aPos, 1.);
       color = aCol;
    }
    </script>

    <script id="shader-fs-show" type="x-shader/x-fragment">
    precision mediump float;
      varying vec3 color;
      varying vec2 vTC;
      uniform sampler2D uTexSamp;
    void main(void) {
       float c = texture2D(uTexSamp, vTC).r + .1;
       gl_FragColor = vec4(c*color, 1.);
    }
    </script>

    <script type="text/javascript">

        var prMatrix, mvMat, mvMatLoc, rotMat, c_w, c_h, off = 0, pi2 = 0;
        function webGLStart() {
            initGL()
            transl = -5
            c_w = Math.round(.9 * window.innerWidth); c_h = window.innerHeight - 10;
            canvas.width = c_w; canvas.height = c_h;
            gl.viewport(0, 0, c_w, c_h);

            var prog_show = gl.createProgram();
            gl.attachShader(prog_show, getShader(gl, "shader-vs-show"));
            gl.attachShader(prog_show, getShader(gl, "shader-fs-show"));
            gl.linkProgram(prog_show);
            gl.useProgram(prog_show);

            var posLocation = gl.getAttribLocation(prog_show, "aPos");
            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.vertexAttribPointer(posLocation, 3, gl.FLOAT, false, 32, 0);
            gl.enableVertexAttribArray(posLocation);
            var colLocation = gl.getAttribLocation(prog_show, "aCol");
            gl.vertexAttribPointer(colLocation, 3, gl.FLOAT, false, 32, 12);
            gl.enableVertexAttribArray(colLocation);
            var texLoc = gl.getAttribLocation(prog_show, "aTC");
            gl.vertexAttribPointer(texLoc, 2, gl.FLOAT, false, 32, 24);
            gl.enableVertexAttribArray(texLoc);

            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            prMatrix = new CanvasMatrix4();
            prMatrix.perspective(70, c_w / c_h, .01, 100);
            mvMatrix = new CanvasMatrix4();
            rotMat = new CanvasMatrix4();
            rotMat.makeIdentity();
            rotMat.rotate(90, 1, 0, 0);
            mvMatLoc = gl.getUniformLocation(prog_show, "mvMatrix");

            gl.enable(gl.DEPTH_TEST);
            gl.clearColor(.5, .7, 1., 1);

            pt = new Float32Array(100000); ind = new Uint16Array(100000);

            var k = 2 * 64, img = new Uint8Array(4 * k * k);
            leaf_tex(k, img)
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, k, k, 0, gl.RGBA, gl.UNSIGNED_BYTE, img)
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
            gl.generateMipmap(gl.TEXTURE_2D);

            var b = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]);

            leaf3(b, .03, 1.3, 0, 0)
            leaf(b, .03, 1, 0, -.6)
            leaf2(b, .03, 1, 0, 1.2)
            //   leaves3(b, .03);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ind, gl.STATIC_DRAW);
            gl.bufferData(gl.ARRAY_BUFFER, pt, gl.STATIC_DRAW);

            drawScene()

            canvas.resize = function () {
                c_w = Math.round(.9 * window.innerWidth); c_h = window.innerHeight - 10;
                canvas.width = c_w; canvas.height = c_h;
                gl.viewport(0, 0, c_w, c_h);
                prMatrix.makeIdentity();
                prMatrix.perspective(70, c_w / c_h, .01, 100);
                drawScene();
            }
        }
        function leaves(b, R) {
            leaf(b, R, .8, .1, 0)
            leaf(b, R, .7, -.1, .9)
            leaf(b, R, .7, .1, -1.8)
            leaf(b, R, 1.4, -.15, .4)
            leaf(b, R, 1.5, -.05, .9)
        }
        function leaves2(b, R) {
            leaf2(b, R, .8, .1, 0)
            leaf2(b, R, .7, -.1, .9)
            leaf2(b, R, .7, .1, -1.8)
            leaf2(b, R, 1.4, -.15, .4)
            leaf2(b, R, 1.5, -.05, .9)
        }
        function leaves3(b, R) {
            leaf3(b, R, .8, .1, 0)
            leaf3(b, R, .7, -.1, .9)
            leaf3(b, R, .7, .1, -1.8)
            leaf3(b, R, 1.4, -.15, .4)
            leaf3(b, R, 1.5, -.05, .9)
        }
        function leaf(b, R, lb, y0, ang) {
            var t0 = off / 8, r1 = .25, r2 = .5, fi5 = 2 * Math.PI / 5, fi6 = Math.PI / 6,
                si = Math.sin(ang), co = Math.cos(ang), fi
            var t = b[0] * co - b[2] * si
            b[2] = b[0] * si + b[2] * co
            b[0] = t
            b[1] += y0
            var bn = new Float32Array(6)
            var no = Math.sqrt(b[0] * b[0] + b[2] * b[2])
            bn[0] = b[2] / no; bn[2] = -b[0] / no; bn[4] = -.05
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j]
            var li = .2 * (1 - Math.abs(b[1]))
            pt[off++] = 0; pt[off++] = .4 + li; pt[off++] = 0
            pt[off++] = 0; pt[off++] = 0
            t = t0 + 1
            var sd = Math.sin(Math.PI * 2 / 13), cd = Math.cos(Math.PI * 2 / 13),
                s1 = Math.sin(Math.PI * .1), c1 = Math.cos(Math.PI * .1),
                si = s1 / 2, co = -1, tmp
            for (var i = 0; i < 5; i++) {
                tmp = si * c1 + co * s1; co = co * c1 - si * s1; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r1 * co + .1) + bn[j] * r1 * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = 0; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r2 * co + .2) + bn[j] * r2 * si
                pt[off++] = 0; pt[off++] = .5 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r1 * co + .1) + bn[j] * r1 * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = 0
            }
            for (var i = 0; i < 5; i++) {
                ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
                ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t++;
            }

            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + R * b[j + 3]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + R * b[j + 6]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] - R * b[j + 3]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] - R * b[j + 6]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t; ind[pi2++] = t - 3;

        }
        function leaf2(b, R, lb, y0, ang) {
            var t0 = off / 8, r1 = .25, rm = .39, r2 = .5,
                si = Math.sin(ang), co = Math.cos(ang), fi
            var t = b[0] * co - b[2] * si
            b[2] = b[0] * si + b[2] * co
            b[0] = t
            b[1] += y0
            var bn = new Float32Array(6)
            var no = Math.sqrt(b[0] * b[0] + b[2] * b[2])
            bn[0] = b[2] / no; bn[2] = -b[0] / no; bn[4] = -.05
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j]
            var li = .2 * (1 - Math.abs(b[1]))
            pt[off++] = 0; pt[off++] = .4 + li; pt[off++] = 0
            pt[off++] = 0; pt[off++] = 0
            t = t0 + 1
            var sd = Math.sin(Math.PI * .08), cd = Math.cos(Math.PI * .08),
                si = si / 2, co = -1, tmp
            for (var i = 0; i < 5; i++) {
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r1 * co + .1) + bn[j] * r1 * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = .25; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (rm * co + .15) + bn[j] * rm * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = .5; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r2 * co + .2) + bn[j] * r2 * si
                pt[off++] = 0; pt[off++] = .5 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (rm * co + .15) + bn[j] * rm * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = .5
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r1 * co + .1) + bn[j] * r1 * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = .25
            }
            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 4; j++) {
                    ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
                }
                t++
            }
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + R * b[j + 3]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + R * b[j + 6]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] - R * b[j + 3]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] - R * b[j + 6]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t; ind[pi2++] = t - 3;
        }
        function leaf3(b, R, lb, y0, ang) {
            var t0 = off / 8, r1 = .25, rm = .39, r2 = .5,
                si = Math.sin(ang), co = Math.cos(ang), fi
            var t = b[0] * co - b[2] * si
            b[2] = b[0] * si + b[2] * co 
            b[0] = t // to elongate
            b[1] += y0
            var bn = new Float32Array(6)
            var no = Math.sqrt(b[0] * b[0] + b[2] * b[2])
            bn[0] = b[2] / (no); 
            bn[2] = -b[0] / no; 
            bn[4] = .05*1.25 // change depth
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j]
            var li = .02 * (1 - Math.abs(b[1])) // change shadow property of the leaf
            pt[off++] = 0; pt[off++] = .4 + li; pt[off++] = 0
            pt[off++] = 0; pt[off++] = 0
            t = t0 + 1
            var sd = Math.sin(Math.PI * 0.3), cd = Math.cos(Math.PI * .3),
                si = 0, co = -1, tmp
            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r1 * co + .1) + bn[j] * r1 * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = .125; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (rm * co + .15) + bn[j] * rm * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = .5; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r2 * co + .2) + bn[j] * r2 * si
                pt[off++] = 0; pt[off++] = .5 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = 1
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (rm * co + .15) + bn[j] * rm * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = .5
                tmp = si * cd + co * sd; co = co * cd - si * sd; si = tmp
                for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + lb * b[j] + bn[j + 3] +
                    b[j] * (r1 * co + .1) + bn[j] * r1 * si
                pt[off++] = 0; pt[off++] = .6 + li; pt[off++] = 0
                pt[off++] = 1; pt[off++] = .125
            }
            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 4; j++) {
                    ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
                }
                t++
            }
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + R * b[j + 3]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] + R * b[j + 6]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] - R * b[j + 3]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            for (var j = 0; j < 3; j++) pt[off++] = b[j + 9] - R * b[j + 6]
            pt[off++] = .5; pt[off++] = .5; pt[off++] = pt[off++] = pt[off++] = 0
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t++; ind[pi2++] = t;
            ind[pi2++] = t0; ind[pi2++] = t; ind[pi2++] = t - 3;
        }
        function leaf_tex(k, img) {
            var kk = k * k, k1 = k - 1, a = .7 / k
            var hk = new Float32Array(k * k);
            for (var j = 1; j < k - 1; j++)  hk[j * (k + 1)] = 1 - a * j
            for (var j = 1; j < k / 2 - 1; j++) {
                hk[kk / 2 - j] = a * j
                hk[kk / 2 + k / 2 + j * k] = .5 - a * j
            }
            for (var j = 1; j < 3 * k / 4 - 1; j++) {
                hk[kk / 4 - j] = a * j
                hk[kk / 4 + k / 4 + j * k] = .75 - a * j
            }
            for (var it = 0; it < 5; it++)
                for (var j = k; j < k * k1; j++)
                    hk[j] = (4 * hk[j] + hk[j + 1] + hk[j - 1] + hk[j + k] + hk[j - k]) * .125
            var t = 0
            for (var i = 0; i < kk; i++) {
                img[t++] = 255 * (1 - hk[i]); img[t++] = img[t++] = img[t++] = 0
            }
        }
        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            rotMat.rotate(xRot / 5, 1, 0, 0); rotMat.rotate(yRot / 5, 0, 1, 0);
            rotMat.rotate(zRot, 0, 0, 1);
            yRot = xRot = zRot = 0;
            mvMatrix.makeIdentity();
            mvMatrix.translate(-1, 0, 0);
            mvMatrix.multRight(rotMat);
            mvMatrix.translate(0, 0, transl);
            mvMatrix.multRight(prMatrix);
            gl.uniformMatrix4fv(mvMatLoc, false, new Float32Array(mvMatrix.getAsArray()));
            gl.drawElements(gl.TRIANGLES, pi2, gl.UNSIGNED_SHORT, 0);
        }
    </script>
</head>

<body onload="webGLStart();" onresize="canvas.resize();">
    <canvas id="canvas" width="500" height="500"></canvas>
    <br>Use your fingers or mouse to control model
    (hold <i>shift</i> key or use mouse wheel to zoom it).

    <p>Procedural leaves (3D WebGL model).

        <hr><a href="maple.htm">Modeling the Mighty Maple for Web</a>
        &nbsp; &nbsp; <i>updated</i> 2 May 2015
</body>

</html>